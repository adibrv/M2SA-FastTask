
/**
 *
 * @author GAMUTAN, Adrian C. - 2019102304 - A126
 */

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.awt.Color;
import java.awt.Component;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.Vector;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class MainFrame extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainFrame.class.getName());

    
    public MainFrame() {
        initComponents();
        taskList.getColumnModel().getColumn(0).setCellRenderer(new PriorityCellRenderer());
        try {
            java.awt.Image icon = javax.imageio.ImageIO.read(getClass().getResource("/ftlogo.png"));
            setIconImage(icon); 
        } catch (Exception e) {
            e.printStackTrace();
        } 
        
        tfSearch.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) { filterTable(); }
            public void removeUpdate(DocumentEvent e) { filterTable(); }
            public void changedUpdate(DocumentEvent e) { filterTable(); }
        });
        
        DefaultTableModel model = (DefaultTableModel) taskList.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        taskList.setRowSorter(sorter);
        
        int priorityColumnIndex = 0;

        sorter.setComparator(priorityColumnIndex, (String p1, String p2) -> 
            Integer.compare(getPriorityValue(p1), getPriorityValue(p2))
        );
        
        int statusColumnIndex = 4;
        taskList.getColumnModel().getColumn(statusColumnIndex).setCellRenderer(new StatusCellRenderer());
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bodyPanel = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        labelDesc = new javax.swing.JLabel();
        taskListPanel = new javax.swing.JPanel();
        taskListSPanel = new javax.swing.JScrollPane();
        taskList = new javax.swing.JTable();
        taskOptionPanel = new javax.swing.JPanel();
        labelTaskName = new javax.swing.JLabel();
        tfTaskName = new javax.swing.JTextField();
        labelDueDate = new javax.swing.JLabel();
        spinnerHour = new javax.swing.JSpinner();
        dueDateChooser = new com.toedter.calendar.JDateChooser();
        labelDueTime = new javax.swing.JLabel();
        spinnerMinute = new javax.swing.JSpinner();
        labelTimeCln = new javax.swing.JLabel();
        labelPriority = new javax.swing.JLabel();
        comboPriority = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        javax.swing.JLabel labelSearch = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        javax.swing.JMenuItem menuExport = new javax.swing.JMenuItem();
        javax.swing.JMenuItem menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FastTask Application");
        setMinimumSize(new java.awt.Dimension(1000, 729));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        bodyPanel.setBackground(new java.awt.Color(235, 235, 235));

        labelTitle.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("FastTask");

        labelDesc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelDesc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDesc.setText("Task Management System");

        taskListPanel.setBackground(new java.awt.Color(255, 255, 255));

        taskList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Priority", "Task", "Due Date", "Due Time", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        taskList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taskListMouseClicked(evt);
            }
        });
        taskListSPanel.setViewportView(taskList);
        if (taskList.getColumnModel().getColumnCount() > 0) {
            taskList.getColumnModel().getColumn(0).setPreferredWidth(35);
            taskList.getColumnModel().getColumn(1).setPreferredWidth(250);
        }

        javax.swing.GroupLayout taskListPanelLayout = new javax.swing.GroupLayout(taskListPanel);
        taskListPanel.setLayout(taskListPanelLayout);
        taskListPanelLayout.setHorizontalGroup(
            taskListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(taskListSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)
        );
        taskListPanelLayout.setVerticalGroup(
            taskListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskListPanelLayout.createSequentialGroup()
                .addComponent(taskListSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        taskOptionPanel.setOpaque(false);

        labelTaskName.setText("Task name: ");

        labelDueDate.setText("Due date:");

        spinnerHour.setModel(new javax.swing.SpinnerNumberModel(23, 0, 23, 1));

        labelDueTime.setText("Due time:");

        spinnerMinute.setModel(new javax.swing.SpinnerNumberModel(59, 0, 59, 1));

        labelTimeCln.setText(":");

        labelPriority.setText("Priority level:");

        comboPriority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low", "Medium", "High" }));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        labelSearch.setText("Search:");

        javax.swing.GroupLayout taskOptionPanelLayout = new javax.swing.GroupLayout(taskOptionPanel);
        taskOptionPanel.setLayout(taskOptionPanelLayout);
        taskOptionPanelLayout.setHorizontalGroup(
            taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(taskOptionPanelLayout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(taskOptionPanelLayout.createSequentialGroup()
                        .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelTaskName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelDueDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelDueTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelPriority, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboPriority, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(taskOptionPanelLayout.createSequentialGroup()
                                .addComponent(spinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelTimeCln)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dueDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                            .addComponent(tfTaskName)))
                    .addGroup(taskOptionPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(labelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        taskOptionPanelLayout.setVerticalGroup(
            taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(taskOptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTaskName)
                    .addComponent(tfTaskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dueDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDueDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerMinute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTimeCln)
                    .addComponent(labelDueTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDelete)
                        .addComponent(btnUpdate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(taskOptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSearch))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bodyPanelLayout = new javax.swing.GroupLayout(bodyPanel);
        bodyPanel.setLayout(bodyPanelLayout);
        bodyPanelLayout.setHorizontalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(taskListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelDesc, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 988, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(taskOptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bodyPanelLayout.setVerticalGroup(
            bodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyPanelLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(labelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelDesc)
                .addGap(18, 18, 18)
                .addComponent(taskOptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        menuExport.setText("Export to PDF");
        menuExport.setToolTipText("");
        menuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportActionPerformed(evt);
            }
        });
        jMenu1.add(menuExport);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bodyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getTimeLeftIndicator(LocalDateTime dueDateTime) {
        LocalDateTime now = LocalDateTime.now();
        if (now.isAfter(dueDateTime)) {
            return "OVERDUE";
        }
        long totalMinutes = java.time.Duration.between(now, dueDateTime).toMinutes();
        long days = totalMinutes / (60 * 24);
        long hours = (totalMinutes % (60 * 24)) / 60;
        long minutes = totalMinutes % 60;

        if (days > 0) {
            return days + (days == 1 ? " day left" : " days left");
        } else if (hours > 0) {
            return hours + (hours == 1 ? " hour left" : " hours left");
        } else {
            return minutes + (minutes == 1 ? " minute left" : " minutes left");
        }
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DefaultTableModel model = (DefaultTableModel) taskList.getModel();
        Vector<Vector> tableData = model.getDataVector();

        try {
            FileOutputStream file = new FileOutputStream("file.bin");
            ObjectOutputStream output = new ObjectOutputStream(file);

            output.writeObject(tableData);

            output.close();
            file.close();

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        // Export to a text file for Notepad
        try {
            java.io.BufferedWriter writer = new java.io.BufferedWriter(new java.io.FileWriter("tasks.txt"));
            // Write column headers
            for (int col = 0; col < model.getColumnCount(); col++) {
                writer.write(model.getColumnName(col));
                if (col != model.getColumnCount() - 1) {
                    writer.write(",");
                }
            }
            writer.write("\n");
            // Write data rows
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    Object value = model.getValueAt(row, col);
                    writer.write(value == null ? "" : value.toString());
                    if (col != model.getColumnCount() - 1) {
                        writer.write(",");
                    }
                }
                writer.write("\n");
            }
            writer.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            
            FileInputStream file = new FileInputStream("file.bin");
            ObjectInputStream input = new ObjectInputStream(file);
            
            Vector<Vector> tableData = (Vector<Vector>)input.readObject();
            
            input.close();
            file.close();
            
            DefaultTableModel model = (DefaultTableModel) taskList.getModel();
            for (int i = 0; i < tableData.size(); i++) {
                Vector row = tableData.get(i);
                model.addRow(new Object[]{row.get(0), row.get(1), row.get(2), row.get(3)});
            }
            
            for (int i = 0; i < model.getRowCount(); i++) {
                String dateStr = (String) model.getValueAt(i, 2); // "MM/dd/yyyy"
                String timeStr = (String) model.getValueAt(i, 3); // "HH:mm"
                try {
                    java.time.format.DateTimeFormatter dateFormatter = java.time.format.DateTimeFormatter.ofPattern("M/d/yyyy H:mm");
                    java.time.LocalDateTime dueDateTime = java.time.LocalDateTime.parse(dateStr + " " + timeStr, dateFormatter);
                    model.setValueAt(getTimeLeftIndicator(dueDateTime), i, 4);
                } catch (Exception ex) {
                    model.setValueAt("Invalid date", i, 4);
                }
            }
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        DefaultTableModel model = (DefaultTableModel) taskList.getModel();
           for (int i = 0; i < model.getRowCount(); i++) {
               String dateStr = (String) model.getValueAt(i, 2); // "MM/dd/yyyy"
               String timeStr = (String) model.getValueAt(i, 3); // "HH:mm"
               try {
                   java.time.format.DateTimeFormatter dateFormatter = java.time.format.DateTimeFormatter.ofPattern("M/d/yyyy H:mm");
                   java.time.LocalDateTime dueDateTime = java.time.LocalDateTime.parse(dateStr + " " + timeStr, dateFormatter);
                   model.setValueAt(getTimeLeftIndicator(dueDateTime), i, 4);
               } catch (Exception ex) {
                   model.setValueAt("Invalid date", i, 4);
               }
           }
    }//GEN-LAST:event_formMouseMoved

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = taskList.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this,
                "No task selected!",
                "Select a task and try again",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        String taskName = tfTaskName.getText();
        Date dueDate = dueDateChooser.getDate();
        int dueHour = (Integer) spinnerHour.getValue();
        int dueMin = (Integer) spinnerMinute.getValue();
        Object taskPriority = comboPriority.getSelectedItem();

        if (taskName.isEmpty() || dueDate == null) {
            JOptionPane.showMessageDialog(this, "Please enter all empty fields!",
                "Try again",
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalDate localDate = dueDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        int year = localDate.getYear();
        int month = localDate.getMonthValue();
        int day = localDate.getDayOfMonth();

        String dueDateFormatted = (month + "/" + day + "/" + year);
        String dueTime = String.format("%02d:%02d", dueHour, dueMin);
        
        LocalDateTime dueDateTime = LocalDateTime.of(year, month, day, dueHour, dueMin);
        String timeLeft = getTimeLeftIndicator(dueDateTime);

        DefaultTableModel model = (DefaultTableModel) taskList.getModel();
        model.setValueAt(taskPriority, selectedRow, 0);
        model.setValueAt(taskName, selectedRow, 1);
        model.setValueAt(dueDateFormatted, selectedRow, 2);
        model.setValueAt(dueTime, selectedRow, 3);
        if (model.getColumnCount() > 4) {
            model.setValueAt(timeLeft, selectedRow, 4);
        }

        JOptionPane.showMessageDialog(this, "Task updated!");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = taskList.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this,
                "No task selected!",
                "Select a task and try again",
                JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) taskList.getModel();
            model.removeRow(row);

            JOptionPane.showMessageDialog(this, "Task deleted!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String taskName = tfTaskName.getText();
        Date dueDate = dueDateChooser.getDate();
        int dueHour = (Integer) spinnerHour.getValue();
        int dueMin = (Integer) spinnerMinute.getValue();
        Object taskPriority = comboPriority.getSelectedItem();

        String dueTime = String.format("%02d:%02d", dueHour, dueMin);

        if (taskName.isEmpty() || dueDate == null) {
            JOptionPane.showMessageDialog(this, "Please enter all empty fields!",
                "Try again",
                JOptionPane.ERROR_MESSAGE);
        } else {
            LocalDate localDate = dueDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int year = localDate.getYear();
            int month = localDate.getMonthValue();
            int day = localDate.getDayOfMonth();

            String dueDateFormatted = (month + "/" + day + "/" + year);

            // Calculate dueDateTime as LocalDateTime
            LocalDateTime dueDateTime = LocalDateTime.of(year, month, day, dueHour, dueMin);
            String timeLeft = getTimeLeftIndicator(dueDateTime);

            DefaultTableModel model = (DefaultTableModel) taskList.getModel();
            // Add a new row including the time left
            model.addRow(new Object[]{taskPriority, taskName, dueDateFormatted, dueTime, timeLeft});

            tfTaskName.setText("");
            spinnerHour.setValue(23);
            spinnerMinute.setValue(59);

            JOptionPane.showMessageDialog(this, "Task added!");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void taskListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taskListMouseClicked
        int index = taskList.getSelectedRow();
        if (index >= 0) {
            DefaultTableModel model = (DefaultTableModel)taskList.getModel();

            String priority = (String)model.getValueAt(index, 0);
            String task = (String)model.getValueAt(index, 1);
            String dueTimeStr = (String)model.getValueAt(index, 3);
            comboPriority.setSelectedItem(priority);
            tfTaskName.setText(task);

            try {
                Date date = new SimpleDateFormat("MM/dd/yyyy").parse((String)model.getValueAt(index,2));
                dueDateChooser.setDate(date);
            } catch (ParseException ex) {
                System.getLogger(MainFrame.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
                dueDateChooser.setDate(null);
            }
            String[] timeParts = dueTimeStr.split(":");
            spinnerHour.setValue(Integer.parseInt(timeParts[0]));
            spinnerMinute.setValue(Integer.parseInt(timeParts[1]));
        }
    }//GEN-LAST:event_taskListMouseClicked

    private void menuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportActionPerformed
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setSelectedFile(new java.io.File("table.pdf"));
        int option = fileChooser.showSaveDialog(this);
        if (option == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();
            exportTableToPDF(taskList, filePath); // Replace taskList with your JTable variable
        }
    }//GEN-LAST:event_menuExportActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private int getPriorityValue(String p) {
        if ("high".equalsIgnoreCase(p)) return 1;
        if ("medium".equalsIgnoreCase(p)) return 2;
        if ("low".equalsIgnoreCase(p)) return 3;
        return 4;
    }
    
    private void filterTable() {
        String keyword = tfSearch.getText().trim();
        TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) taskList.getRowSorter();
        if (keyword.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + Pattern.quote(keyword), 1)); // 1 = Task Name column
        }
    }
    
    private static class StatusCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (!isSelected && value != null && value.toString().equalsIgnoreCase("OVERDUE")) {
                c.setBackground(Color.RED);
                c.setForeground(Color.WHITE);
            } else if (!isSelected) {
                c.setBackground(Color.WHITE);
                c.setForeground(Color.BLACK);
            } else {
                c.setBackground(table.getSelectionBackground());
                c.setForeground(table.getSelectionForeground());
            }
            return c;
        }
    }
    
    private static class PriorityCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (!isSelected) {
                String priority = value != null ? value.toString().toLowerCase() : "";
                switch (priority) {
                    case "high":
                        c.setBackground(Color.RED);
                        c.setForeground(Color.WHITE);
                        break;
                    case "medium":
                        c.setBackground(Color.YELLOW);
                        c.setForeground(Color.BLACK);
                        break;
                    case "low":
                        c.setBackground(Color.GREEN);
                        c.setForeground(Color.BLACK);
                        break;
                    default:
                        c.setBackground(Color.WHITE);
                        c.setForeground(Color.BLACK);
                }
            } else {
                c.setBackground(table.getSelectionBackground());
                c.setForeground(table.getSelectionForeground());
            }
            return c;
        }
    }
    /**
     * @param args the command line arguments
     */
    
    public void exportTableToPDF(JTable table, String filePath) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();
            PdfPTable pdfTable = new PdfPTable(table.getColumnCount());

            // Add table headers
            for (int i = 0; i < table.getColumnCount(); i++) {
                pdfTable.addCell(new PdfPCell(new Phrase(table.getColumnName(i))));
            }

            // Add table rows
            for (int rows = 0; rows < table.getRowCount(); rows++) {
                for (int cols = 0; cols < table.getColumnCount(); cols++) {
                    Object value = table.getValueAt(rows, cols);
                    pdfTable.addCell(value != null ? value.toString() : "");
                }
            }

            document.add(pdfTable);
            document.close();
            javax.swing.JOptionPane.showMessageDialog(this, "PDF exported successfully!");
        } catch (Exception e) {
            e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Error exporting PDF: " + e.getMessage());
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainFrame().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboPriority;
    private com.toedter.calendar.JDateChooser dueDateChooser;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel labelDesc;
    private javax.swing.JLabel labelDueDate;
    private javax.swing.JLabel labelDueTime;
    private javax.swing.JLabel labelPriority;
    private javax.swing.JLabel labelTaskName;
    private javax.swing.JLabel labelTimeCln;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JSpinner spinnerHour;
    private javax.swing.JSpinner spinnerMinute;
    private javax.swing.JTable taskList;
    private javax.swing.JPanel taskListPanel;
    private javax.swing.JScrollPane taskListSPanel;
    private javax.swing.JPanel taskOptionPanel;
    private javax.swing.JTextField tfSearch;
    private javax.swing.JTextField tfTaskName;
    // End of variables declaration//GEN-END:variables
}
